@model RepoImpact

@{
    ViewBag.Title = "Repository Impact";
}

@section intellisense
{
    <script src="~/Scripts/jquery-1.4.4-vsdoc.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery.tablesorter.min.js" type="text/javascript"></script>
    <script src="~/Scripts/g.raphael/raphael-min.js" type="text/javascript"></script>
    <script src="~/Scripts/g.raphael/g.raphael-min.js" type="text/javascript"></script>
    <script src="~/Scripts/g.raphael/g.pie-min.js" type="text/javascript"></script>
}

@{
    var users = new Dictionary<string, int>();
    Func<string, int> getUser = u =>
    {
        var un = u.ToUpperInvariant();
        int id;
        if (!users.TryGetValue(un, out id))
        {
            id = users.Count + 1;
            users[un] = id;
        }

        return id;
    };

    var epoch = new DateTime(1970, 1, 1);
    var buckets = (from w in Model.Weekly
                   select new
                   {
                       d = (w.Week - epoch).TotalSeconds,
                       i = (from i in w.Impacts
                            let user = getUser(i.Author)
                            orderby i.Impact descending
                            select new[] { user, i.Impact }).ToArray(),
                   }).ToArray();

    var authors = users.ToDictionary(a => a.Value.ToString(), a => new { n = a.Key });

    var json = new { authors, buckets };
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
}

@section headers
{
    <link href="@Url.Content("~/Content/tablesort.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/jquery.tablesorter.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/g.raphael/raphael-min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/g.raphael/g.raphael-min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/g.raphael/g.pie-min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/g.raphael/g.impact.js")" type="text/javascript"></script>
    <script type="text/javascript">
        function buildGraph(div, column) {
            var headers = $("#stats-table thead th").get();
            var getIndex = function (headerText) {
                return headers.indexOf($.map(headers, function (h) { if ($(h).text() === headerText) { return h; } })[0]);
            };

            var rows = $("#stats-table tbody tr");
            var getValues = function (headerText, normalize) {
                normalize = normalize || function (a) { return a; };
                var colIndex = getIndex(headerText);
                return $.map(rows, function (item) { return normalize($($(item).find("td")[colIndex]).text()); });
            };

            var names = getValues("Author");
            var values = getValues(column, function (a) { return +a; });

            var r = Raphael(div);
            r.g.text(250, 20, column).attr({ "font-size": 20 });
            var pie = r.g.piechart(110, 110, 100, values, { legend: names, legendpos: "east" })
            pie.hover(function () {
                this.sector.stop();
                this.sector.scale(1.1, 1.1, this.cx, this.cy);
                if (this.label) {
                    this.label[0].stop();
                    this.label[0].scale(1.5);
                    this.label[1].attr({ "font-weight": 800 });
                } 
            }, function () {
                this.sector.animate({ scale: [1, 1, this.cx, this.cy] }, 500, "bounce");
                if (this.label) {
                    this.label[0].animate({ scale: 1 }, 500, "bounce");
                    this.label[1].attr({ "font-weight": 400 });
                } 
            });
        }

        $(function () {
            $(".tablesorter").tablesorter();

            buildGraph("commit-graph", "Commits");
            buildGraph("impact-graph", "Impact");

            var data = @Html.Raw(serializer.Serialize(json));
            impact("weekly-graph", data, { heightfunc: Math.sqrt });
        });
    </script>
    <style>
        #commit-graph, #impact-graph
        {
            width: 500px;
            height: 220px;
            float: left;
        }

        #weekly-graph
        {
            clear: left;
            overflow: auto;
            width: 100%;
        }
    </style>
}

<div class="impact-graphs">
    <div id="commit-graph"></div>
    <div id="impact-graph"></div>
</div>
<div id="weekly-graph"></div>

<table class="tablesorter" id="stats-table">
  <thead>
    <tr>
        <th>Author</th>
        <th>Commits</th>
        <th>Insertions</th>
        <th>Deletions</th>
        <th>Impact</th>
        <th>Languages</th>
    </tr>
  </thead>
  <tbody>
@foreach (var item in Model.AllTime)
{
    <tr>
        <td>@Html.DisplayFor(modelItem => item.Author)</td>
        <td>@Html.DisplayFor(modelItem => item.Commits)</td>
        <td>@Html.DisplayFor(modelItem => item.Insertions)</td>
        <td>@Html.DisplayFor(modelItem => item.Deletions)</td>
        <td>@Html.DisplayFor(modelItem => item.Impact)</td>
        <td>
            @{
                var max = item.Languages.Max(l => l.Value.Gain);
            }
            @foreach (var lang in item.Languages.OrderByDescending(l => l.Value.Gain))
            {
                <div style="width: @(200.0 * lang.Value.Gain / max)px; color: black; background: #f00; white-space: pre;">@(lang.Key)</div>
            }
        </td>
    </tr>
}
  </tbody>
</table>
